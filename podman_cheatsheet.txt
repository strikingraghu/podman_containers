podman ps -a
podman images or podman image list
podman image prune
podman stop <containerID>

Launching Wordpress POD on Podman instance:
podman pod create --name dev-wordpress --publish 8080:80
podman run --detach --pod dev-wordpress -e MYSQL_ROOT_PASSWORD="password" -e MYSQL_DATABASE=wpdb -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD="welcome" --name wp-db mariadb
podman run --detach --pod dev-wordpress -e WORDPRESS_DB_HOST='127.0.0.1' -e WORDPRESS_DB_NAME=wpdb -e WORDPRESS_DB_USER=mysqluser -e WORDPRESS_DB_PASSWORD="welcome" --name wp-app wordpress

Podman Containers - Beginner's Guide
Podman is an open-source tool for managing containers, images, volumes, and pods (group of containers). Podman is based on libpod library APIs for managing container lifecycles and supports multiple container image formats, including OCI (Open Container Initiative) and Docker images.
Unlike other container tools implementations, the tools described here do not center around the monolithic Docker container engine and docker command. Instead, Red Hat provides a set of command-line tools that can operate without a container engine. These include: 
podman - for directly managing pods and container images (ps, run, stop, start, attach, exec, and so on) 
buildah - for building, pushing, and signing container images 
skopeo - for copying, inspecting, deleting, and signing images 
runc - for providing container run and build features to podman and buildah 
crun - an optional runtime that can be configured and gives greater flexibility, control, and security for rootless containers

Difference between Docker containers vs Podman containers:
Now, let's proceed further on installation steps:
Step #1 - Podman Installation Process:
RHEL8
Podman is included in the container-tools module, along with Buildah and Skopeo.
sudo yum module enable -y container-tools:rhel8
sudo yum module install -y container-tools:rhel8
Ubuntu
The podman package is available in the official repositories for Ubuntu 20.10 and newer.
# Ubuntu 20.10 and newer
sudo apt-get -y update
sudo apt-get -y install podman
CentOS
Podman is available in the default Extras repos for CentOS 7 and in the AppStream repo for CentOS 8 and Stream.
sudo yum -y install podman
Debian
The podman package is available in the Debian 11 (Bullseye) repositories and later.
sudo apt-get -y install podman
Fedora
sudo dnf -y install podman
End of installation procedures…..Let's get into running Podman containers and pods…!

Step #2 - Running Podman Containers:
In this stage, we are going to learn few commands to Run, Checking Status, Stopping and Restarting containers.
Do a quick validation for any containers that might be running or in a stopped state. Actually, we just installed the Podman packages and yet to run containers. But, it's always a good practice to check what's running before starting new containers.
$ podman ps -a
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES
[ List containers
Description:
  Prints out information about the containers
Usage:
  podman ps [options]
Examples:
  podman ps -a
  podman ps -a --format "{{.ID}}  {{.Image}}  {{.Labels}}  {{.Mounts}}"
  podman ps --size --sort names ]
Search for a specific image in Docker or Redhat registry that is required to run our first container. In this example: we are searching for 'HTTP' container. 
→ After going through the steps, repeat these steps for Nginx or Tomcat container deployment as lab exercises. So that, you get lot of confidence to run at large scale
$ podman search httpd
Search registry for image
Description:
  Search registries for a given image. Can search all the default registries or a specific registry. Users can limit the number of results, and filter the output based on certain conditions.
Usage:
  podman search [options] TERM
Examples:
  podman search --filter=is-official --limit 3 alpine

(You will see a list of images available in the Redhat or Docker registry. Please copy the 'Name' of the image.
Example: docker.io docker.io/library/httpd Apache HTTP Server)
Let's run HTTP container taking the image name captured in the previous (above) command.
$ podman run -dt docker.io/centos/httpd-24-centos8
Trying to pull docker.io/centos/httpd-24-centos8:latest...
Getting image source signatures
Copying blob 3c72a8ed6814 done
Copying blob afdf2ecdaa2f done
Copying blob a1d926117d46 done
Copying blob 42c269fe6f7b done
Copying blob 74241943e2c2 done
Copying blob 07a0da26acf9 done
Copying blob 9e6c9d2db631 done
Copying blob a33035987d8c done
Copying blob eefe613be3f4 done
Copying config 7d2fe0e482 done
Writing manifest to image destination
Storing signatures
7ac5a3ab02fc262cea888d71eb1a08f086aa51ef374e31ec23a2bda04608503d
Note: -dt (Using --detach and --tty parameters, which helps us to run container in background mode and allocate a pseudo-TTY for container respectively)
Now, let's see the status of the HTTPD container by using below command.
$ podman ps -a
(ContainerID) 7ac5a3ab02fc3 (Status) 3 minutes ago  Up 3 minutes ago
Note: I have trimmed the output of this command. You should see in a tabular format with more details
Congratulations, you have successfully finished running containers via Podman. Try to repeat these steps for Nginx, Tomcat or MySQL images. You will get lot of hands-on as well. Next, we will get into validating, managing containers and learning more on container specifications like Network, Storage and Monitoring aspects.

Step #3 - Managing Podman Containers:
Now, we will learn few basic podman command functionalities to create, run, stop, start, restart and pause containers.
$ podman create --name=pms docker.io/plexinc/pms-docker
Trying to pull docker.io/plexinc/pms-docker:latest...
Getting image source signatures
Copying blob 7b1a6ab2e44d done
Copying blob 6fd5e19b3041 done
Copying blob bb4e3e690d6d done
Copying blob c7144ddbc09f done
Copying config 6749cc56cf done
Writing manifest to image destination
Storing signatures
f18fdb3550fcd07446d07e4d7f15548a8d7b9fe317698220d4715b89a1e22b12
$ podman ps -a
CONTAINERID    IMAGE         CREATED       STATUS     NAMES
f18fdb3550fc  pms-docker   4 seconds ago   Created     pms
Note: Here, we are just creating a container and not yet started. We have to use start command to run the containers. Alternatively, we can directly use 'podman run' command to create and run container in one-shot.
Let's run the container and play with other command functionalities.
$ podman container start f18fdb3550fc 
[f18fdb3550fc is the container id in my machine]
Note: I have used 'podman container' CLI method to start a container. Otherwise, we can also start a container using podman start <IMAGE ID>, where both options are same! One thing to note, podman provides multiple ways to stop, start, restart or kills commands. Try to learn them by switching the methods provided.
Another example of similar nature is 'podman images' and 'podman image list' command. Both options are provide a list a images available in local registry.
Other command functionalities that are used for managing containers.
$ podman stop f18fdb3550fc
[f18fdb3550fc is the container id in my machine]
$ podman container restart f18fdb3550fc
[f18fdb3550fc is the container id in my machine]
$ podman pause f18fdb3550fc
[f18fdb3550fc is the container id in my machine]
$ podman unpause f18fdb3550fc
f18fdb3550fcd07446d07e4d7f15548a8d7b9fe317698220d4715b89a1e22b12
[f18fdb3550fc is the container id in my machine]
Note: Loads of such utilities, please visit RedHat documentation for more details and hands-on labs!

Step #4 - Podman Container Storage, Networking and Monitoring aspects:
Now, we will learn few basic podman command functionalities to create, run, stop, start, restart and pause containers.

